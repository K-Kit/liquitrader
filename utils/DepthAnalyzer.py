def get_price(order):
    return order[0]


def get_amount(order):
    return order[1]


class PossibleTradeInfo:
    def __init__(self, price, amount, average):
        self.price = price
        self.amount = amount
        self.average_price = average

def process_depth(orderbook, target_amount, min_trade):
    """
    parse order book, returns information for:
        - depth above min_trade quantity
        - depth where we can fill all
    :param orderbook: 
    :param target_amount: 
    :param min_trade: 
    :return: (can fill, above min trade)
    """
    amount, cost = 0, 0
    above_min_trade = None
    can_fill = None
    for order in orderbook:
        amount += get_amount(order)
        cost += get_price(order) * get_amount(order)
        if above_min_trade is None and cost > min_trade:
            qty = amount if amount <= target_amount else target_amount
            average = cost/amount
            above_min_trade = PossibleTradeInfo(get_price(order), qty, average)
        
        if amount >= target_amount and cost > min_trade:
            qty = amount if amount <= target_amount else target_amount
            average = cost / amount
            can_fill = PossibleTradeInfo(get_price(order), qty, average)
            return can_fill, above_min_trade
        
    return can_fill, above_min_trade


if __name__ == '__main__':
    asks = [[0.0003674, 16152.69513924], [0.00036743, 24101.0], [0.00036753, 24101.0], [0.00036754, 47878.0], [0.00036764, 24101.0], [0.00036765, 48202.0], [0.00036766, 24101.0], [0.00036768, 24101.0], [0.00036769, 72303.0], [0.00036772, 55188.98386559], [0.00036779, 54101.0], [0.00036798, 24101.0], [0.00036799, 54101.0], [0.000368, 54161.53633179], [0.00036807, 54164.42223749], [0.00036832, 160.0], [0.0003685, 160.0], [0.00036875, 698.4138], [0.00036887, 160.0], [0.000369, 46.22773416], [0.00036948, 56.78453233], [0.00036978, 8334.07467438], [0.00037, 5921.67490715], [0.00037034, 40.35760476], [0.00037038, 1049.21716317], [0.0003706, 1477.8958205], [0.00037076, 4094.1099405], [0.000371, 1066.41369797], [0.00037105, 176.92226032], [0.00037115, 37272.0], [0.00037121, 268.12526813], [0.00037169, 1044.37243928], [0.00037187, 16.66073355], [0.00037192, 2069.38694121], [0.00037193, 91.88425464], [0.000372, 118.04423088], [0.00037201, 769.89942808], [0.00037211, 40.43016011], [0.00037224, 50.18297639], [0.0003723, 2494.55427128], [0.00037239, 60.79522794], [0.00037248, 17450.36712888], [0.00037257, 72.24209524], [0.00037278, 84.49817075], [0.0003729, 968.24329005], [0.000373, 1648.89960403], [0.00037303, 97.54140833], [0.00037314, 2753.54832737], [0.00037325, 2221.33345093], [0.00037331, 111.34834671], [0.00037346, 44.02107358], [0.00037363, 125.90196322], [0.000374, 724.68825847], [0.0003742, 67.82602512], [0.00037434, 27.04791344], [0.00037478, 2631.39768019], [0.000375, 3451.6323986], [0.00037552, 40828.54732029], [0.00037597, 46.22212726], [0.00037599, 8368.0], [0.000376, 1797.10442971], [0.00037606, 408.84188721], [0.00037636, 705.89100317], [0.00037682, 25120.31701991], [0.000377, 1096.25910934], [0.00037727, 347.03572708], [0.00037785, 1297.66083245], [0.000378, 1142.71981075], [0.00037862, 26.74262734], [0.00037878, 48.53323362], [0.000379, 6392.4049962], [0.00037916, 35.07159369], [0.0003795, 492.1146403], [0.00037996, 100.0], [0.00037997, 100.0], [0.00038, 1611.99154784], [0.00038001, 100.0], [0.00038079, 295.46861145], [0.000381, 816.02882851], [0.00038121, 30280.55000392], [0.0003818, 17024.74841842], [0.00038196, 50.9598953], [0.000382, 316.67497616], [0.00038224, 1470.48185883], [0.00038267, 30.4657723], [0.000383, 7105.80472897], [0.00038397, 2047.01318573], [0.000384, 356.15377965], [0.00038419, 237.82842294], [0.00038422, 171.3180427], [0.0003843, 5000.0], [0.000385, 6107.51529174], [0.0003856, 35.06601914], [0.00038564, 53.50789006], [0.00038577, 161.35144329], [0.00038585, 263.68526526], [0.000386, 648.1564931], [0.000387, 351.68177714], [0.00038755, 5200.0], [0.00038789, 880.43121963]]
    bids = [[0.00036516, 37198.0], [0.00036513, 7688.0], [0.00036495, 59240.0], [0.0003645, 5570.36593201], [0.00036449, 1000.0], [0.00036429, 63.7765876], [0.000364, 426.18395769], [0.00036327, 724.24438753], [0.0003632, 4092.65777196], [0.00036312, 164.82333216], [0.00036304, 37272.0], [0.00036303, 160.0], [0.000363, 1097.92188514], [0.00036294, 66.59675595], [0.00036217, 65.14065175], [0.00036201, 3030.56795724], [0.000362, 1412.99194288], [0.00036187, 1474.63260116], [0.0003617, 1456.20422542], [0.0003615, 686.5869], [0.00036137, 1280.54991998], [0.000361, 323.01259839], [0.0003606, 1021.941236], [0.00036057, 27664.83870559], [0.00036044, 1980.86871475], [0.0003601, 1219.0621737], [0.00036, 49810.65827844], [0.00035973, 22109.06713368], [0.00035972, 300.0], [0.00035957, 2554.32029674], [0.00035956, 49341.70095109], [0.000359, 1153.66240128], [0.00035892, 745.43590493], [0.00035871, 2818.95615008], [0.0003587, 2421.04882402], [0.00035862, 37272.0], [0.00035858, 400.45029456], [0.0003585, 2500.0], [0.00035804, 27.86007136], [0.000358, 438.71836603], [0.0003575, 300.0], [0.000357, 454.67983562], [0.0003566, 1763.87373941], [0.00035657, 34.67960947], [0.0003565, 25.0], [0.000356, 1514.91137301], [0.00035513, 37272.0], [0.000355, 964.30441327], [0.00035477, 100.0], [0.00035432, 18345.25775087], [0.000354, 799.98166308], [0.00035359, 1000.0], [0.000353, 863.23596891], [0.0003525, 350.0], [0.000352, 412.8894612], [0.000351, 9527.91030898], [0.00035001, 33492.02876489], [0.00035, 9753.76842258], [0.000349, 603.19478777], [0.00034895, 315.23140851], [0.00034859, 6000.0], [0.000348, 337.30155207], [0.00034767, 2609.49124267], [0.00034759, 28.69766089], [0.00034758, 1392.49720064], [0.0003475, 29006.24817446], [0.00034725, 40215.98272138], [0.000347, 732.41660288], [0.00034677, 19.6907944], [0.000346, 30391.58289889], [0.0003456, 2345.6], [0.00034546, 18815.64897525], [0.0003452, 272.88935762], [0.000345, 3630.46133132], [0.000344, 1569.06078267], [0.00034301, 4362.11772252], [0.000343, 2875.70509849], [0.00034262, 100.0], [0.0003425, 350.0], [0.000342, 4543.11501411], [0.00034149, 371.66270925], [0.000341, 5496.4441887], [0.0003401, 229.16645949], [0.00034, 17814.61575742], [0.000339, 1654.10852128], [0.0003388, 37.96082231], [0.00033841, 30.0], [0.00033802, 50.0], [0.000338, 6393.55628694], [0.0003375, 350.0], [0.00033732, 750.77524], [0.000337, 1146.28811784], [0.00033685, 25.0], [0.00033611, 2665.17166672], [0.000336, 3658.46532358], [0.00033543, 893.23922905], [0.000335, 4817.32673219], [0.0003348, 50.0], [0.00033465, 298.07261318], [0.00033452, 350.0]]
    process_buy = process_depth(asks, 24101, .01)
    # process_sell = process_depth(bids, 16152, .01)
    print(process_buy[0].amount > process_buy[1].amount)
    print(process_buy[0].price > process_buy[1].price)